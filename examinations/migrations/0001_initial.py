# Generated by Django 5.2.3 on 2025-06-30 11:15

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('visits', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExaminationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Nazwa badania')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Opis')),
                ('requires_referral', models.BooleanField(default=False, verbose_name='Wymaga skierowania')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktywny')),
            ],
            options={
                'verbose_name': 'Typ badania',
                'verbose_name_plural': 'Typy badań',
                'db_table': 'tenant_schema_examinationtypes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Examination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_date', models.DateField(blank=True, null=True, verbose_name='Data zaplanowana')),
                ('completed_date', models.DateField(blank=True, null=True, verbose_name='Data wykonania')),
                ('results', models.JSONField(default=dict, help_text='JSONField z wynikami badań', verbose_name='Wyniki badań')),
                ('status', models.CharField(choices=[('scheduled', 'Zaplanowane'), ('in_progress', 'W trakcie'), ('completed', 'Zakończone'), ('cancelled', 'Anulowane')], default='scheduled', max_length=20, verbose_name='Status')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Komentarze')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data utworzenia')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Data ostatniej aktualizacji')),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entered_examinations', to=settings.AUTH_USER_MODEL, verbose_name='Wprowadził')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_examinations', to=settings.AUTH_USER_MODEL, verbose_name='Wykonał')),
                ('visit_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinations', to='visits.visitcard', verbose_name='Karta wizyty')),
                ('examination_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='examinations', to='examinations.examinationtype', verbose_name='Typ badania')),
            ],
            options={
                'verbose_name': 'Badanie',
                'verbose_name_plural': 'Badania',
                'db_table': 'tenant_schema_examinations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Measurement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('measurement_date', models.DateField(verbose_name='Data pomiaru')),
                ('blood_pressure_systolic', models.PositiveIntegerField(blank=True, help_text='mmHg (50-300)', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='Ciśnienie skurczowe')),
                ('blood_pressure_diastolic', models.PositiveIntegerField(blank=True, help_text='mmHg (30-200)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='Ciśnienie rozkurczowe')),
                ('pulse', models.PositiveIntegerField(blank=True, help_text='uderzeń/min (30-200)', null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='Tętno')),
                ('waist_circumference', models.DecimalField(blank=True, decimal_places=2, help_text='cm (30.0-200.0)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(30.0), django.core.validators.MaxValueValidator(200.0)], verbose_name='Obwód talii')),
                ('hip_circumference', models.DecimalField(blank=True, decimal_places=2, help_text='cm (50.0-200.0)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(50.0), django.core.validators.MaxValueValidator(200.0)], verbose_name='Obwód bioder')),
                ('bmi', models.DecimalField(blank=True, decimal_places=2, help_text='Opcjonalnie obliczane (kg/m²)', max_digits=5, null=True, verbose_name='BMI')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Komentarze')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Data utworzenia')),
                ('entered_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entered_measurements', to=settings.AUTH_USER_MODEL, verbose_name='Wprowadził dane')),
                ('measured_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='measured_measurements', to=settings.AUTH_USER_MODEL, verbose_name='Wykonał pomiar')),
                ('visit_card', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='visits.visitcard', verbose_name='Karta wizyty')),
            ],
            options={
                'verbose_name': 'Pomiar',
                'verbose_name_plural': 'Pomiary',
                'db_table': 'tenant_schema_measurements',
                'ordering': ['-measurement_date', '-created_at'],
            },
        ),
    ]
